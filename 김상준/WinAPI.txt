WinAPI
기본 설정: 멀티바이트 문자집합 사용
링커 -> 시스템에서 "창"모드
Title이 짤리는 현상은 DefWindowProcW를 사용하여 해결 가능

	1강. 기초
		1) WinAPI 란 무엇인가? & 프로그래밍 형식의 변화
		2) C/C++과 코딩 방식 차이점 - WinMain & WndProc
		3) 윈도우 명칭
		4) Windows Data Types <- MSDN에서 검색 가능
		5) 인스턴스와 핸들
		6) 헝가리안 표기법 - 변수명 + 데이터형 접두사

	2강. 프로그래밍 구조
		1) WinAPI 프로그래밍 구조
			- WinMain(): 윈도우 구조체 등록, 생성 / 메시지 루프
			- WndProc(): 메시지 처리 / WM_xxx, CB_xxx, LM_xxx, PBM_xxx 등 -> 모두 "양의 정수 값"
			- 메시지 루프와 WndProc(): GetMessage(), TranslateMessage(), DispatchMessage() -> WndProc() 실행
		2) 멀티바이트 문자 집합(MBCS) - 1~2byte / 유니코드 - 2byte
		    문자 TCHAR: ANSI -> CHAR / Unicode -> WCHAR
		    문자열 LPTSTR: ANSI -> LPSTR / Unicode -> LPWSTR
		3) WinMain() 원형: int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)
		    -> hInstance - OS가 할당, hPrevInstance - 항상 0, lpCmdLine - 프로그램 외부에서 내부로 값 설정, nCmdShow - 출력 형태
		4) WndProc() 원형: LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
		5) WinMain() 작성 순서: 1. 윈도우 구조체 설정 / 2. 구조체 등록 / 3. 윈도우 생성 / 4. 윈도우 출력 / 5. 메시지 루프
		6) WndProc() 작성 순서: WM_PAINT(화면출력),  WM_DESTROY, default

	3강. 리소스
		1) 리소스 생성
			- 리소스: 메뉴, 다이얼로그, 비트맵, 커서, 아이콘, 엑셀레이터, 문자열
			- 프로젝트명.rc 로 프로젝트 생성시 리소스도 생성됨
		2) 리소스 추가
		3) 리소스 다루기
			- 리소스는 아이디(=>중복되지 않는 양의 정수값)로 다룬다
			- 또한 정수값을 대신할 문자열을 사용 (비쥬얼 스튜디오에서 자동으로 생성)
		4) 아이콘 리소스
			- *.ico 파일 확장자
			- 아이콘 아이디: 접두사 IDI_ 
			- 아이콘 로딩 함수: HICON LoadIcon( _In_ HINSTANCE hInstance, _In_ LPCTSTR IpIconName)
			- MyRegisterClass에서 hIcon, hIconSm을 통해 수정가능
		5) 커서 리소스
			- *.cur 파일 확장자 / 접두사 IDC_
			- 커서 로딩 함수: HCURSOR LoadCursor( _In_ HINSTANCE hInstance, _In_ LPCTSTR lpCursorName)
				-> 기본 제공 커서를 사용할 경우 hInstance에는 nullptr, MAKEINTRESOURCE는 사용 안 함
				-> 클라이언트 영역 안에서만 사용 가능
			- MyRegisterClass에서 hCursor를 통해 수정가능
			- 임의의 커서 생성 -> hotspot 설정 
			- WM_SETCURSOR 를 이용한 커서 설정 -> 전체 윈도우 영역 안에서 사용 가능
				-> 마우스 이동 시 발생 메시지: WM_MOUSEMOVE, WM_SETCURSOR
				-> SetCursor() 로 커서 설정
		6) 메뉴 리소스
			- 메뉴 편집기에서 편집가능 / 접두사 IDR_
			- MyRegisterClass에서 lpszMenuName으로 메뉴 로딩
			- 메뉴 관련 메시지: WM_COMMAND <- 메뉴 선택
			- 메뉴 항목 구분: 메뉴 아이디가 LOWORD(wParam)에 들어감
			- 메뉴 항목 호출 확인
				-> 메시지 박스: int WINAPI MessageBox(_In_opt_ HWND hWnd, _ln_opt_ LPCTSTR lpText, _ln_opt_ LPCTSTR lpCaption, _ln_ UNIT uType)
		7) 문자열 리소스
			- 문자열 리소스 편집기
			- WinMain LoadString을 통해 불러내서 사용

	4강. 그래픽 
		1) 그래픽 개요
			- GDI (Graphics Device Interface): 운영체제의 한 부분으로 출력을 담당
		2) DC의 개념과 역할
			- DC는 출력하기 위한 장치(화면, 프린터)의 특성을 저장하는 구조체
			- DC를 사용하는 그래픽 오브젝트: 비트맵, 브러쉬, 펜 등
			- 데이터형: HDC
		3) DC 함수
			- DC에 관련된 함수: BeginPaint(), EndPaint(), GetDC(), ReleaseDC()
			- BeginPaint(DC를 가져오는 역할)와 EndPaint는 WM_PAINT에서만 사용가능
			- GetDC, ReleaseDC는 어디에서든 호출 가능
		4) 문자 출력
			- 함수의 원형: BOOL TextOut( HDC hdc, int nXStart, int nYStart, LPCTSTR lpString, int cbString)
			- lpString에는 sprintf()를 사용하여 넣어줌, cbString에는 strlen()을 사용하여 넣어줌
			- WM_PAINT에서도 출력할 수 있고, 원하는 함수를 만들어서 원하는 때에 출력 가능
		5) 출력 색상 설정
			- 삼원색(RGB) / 색상 범위: 0 ~ 255 / DWORD(unsigned long): 8비트씩
			- 색상 과련 매크로 함수: RGB() -> GetRValue(), GetGValue(), GetBValue()
		6) 색상값을 활용한 점 출력과 색상값 구하기
			- 점 출력 함수: SetPixel( HDC hdc, int X, int Y, COLORREF crColor)
			- 색상값 추출 함수: COLORREF GetPixel( HDC hdc, int nXPos, int nYPos)
		7) 색상을 적용한 문자열 출력
			- 문자열 출력 관련 함수: SetTextColor( HDC hdc, COLORREF crColor)
			- 글자의 배경 색상 설정: SetBkColor(HDC hdc, COLORREF crColor)
		8) InvalidateRect()
			- 용도: 화면의 일부(RECT) 또는 전체(NULL, 0)를 다시 출력할 때 / WM_PAINT 메시지 발생
			- 무효화 영역 또는 업그레이드 영역 <- 다시 그리고자 하는 영역 지정
			- 함수의 원형: BOOL InvalidateRECT( HWND hWnd, const RECT *lpRect, BOOL bErase)

	5강. 그래픽 오브젝트
		1) 개요
			- GDI 오브젝트: Pen, Brush, DC, Memory DC, Bitmap, Palette 등
			- GDI 오브젝트 사용방법: 운영체제에서 제공한 틀을 바탕으로 사용자가 설정
		2) 스톡오브젝트
			- HGDIOBJ GetStockObject( int fnObject): OS의 GDI오브젝트를 핸들을 가져오는 함수
			- fnObject: 브러쉬, 펜, 폰트, 팔레트
			- HGDIOBJ SelectObject( HDC hdc, HGDIOBJ hgdiobj): 오브젝트 설정
			- BOOL DeleteObject( HGDIOBJ hObject): GDI 오브젝트 해제
		3) 펜
			- 선 색상, 선 굵기, 스타일 지정
			- HPEN CreatePen( int fnPenStyle, int nWidth, COLORREF crColor)
			- 펜을 이용한 선 그리기: BOOL MoveToEx( HDC hdc, int X, int Y, LPPOINT lpPoint), LineTo( HDC hdc, int nXEnd, int nYEnd)
			- 펜 사용 방법: 1. 펜 생성/ 2. 펜 선택 / 3. 선 그리기 / 4. 펜 제거 및 이전 펜 설정 (스톡 오브젝트는 delete 안해도 됨)
			- 펜을 이용한 도형 출력: 
				1. 사각형: BOOL Rectangle( HDC hdc, int nLeftRect, int ,TopRect, int nRightRect, int nBottomRect)
				2. 원: BOOL Ellipse( HDC hdc, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect)
		4) 브러쉬
			- 역할: 도형 내부를 색상과 패턴으로 채우는 역할
			- 브러쉬 생성 함수: CreateSolidBrush(), CreateHatchBrush(), CreatePatternBrush() 등
			- 브러쉬 사용 방법: 1. 브러쉬 생성 / 2. 브러쉬 선택 / 3. 도형 출력 / 4. 브러쉬 제거 및 이전 브러쉬 복구
		5) 비트맵
			- 이미지 종류: bmp, jpg, gif, tga 등
			- 비트맵을 다루는 두가지 방법: 1. 비트맵을 리소스에 등록하여 사용 / 2. LoadImage() 함수를 이용하여 파일로부터 읽음
			- 비트맵을 읽어 출력하는 순서: 1. 비트맵의 핸들 획득 (LoadBitmap, LoadImage) / 2. 메모리 DC 생성 (CreateCompactibleDC)
						   3. 메모리 DC에 비트맵 적용 (SelectObject) / 4. 비트맵 출력 (BitBlt) / 5. 메모리 DC와 비트맵 제거
			- HBITMAP LoadBitmap( HINSTANCE hInstance, LPCTSTR lpBitmapName) <- MAKERESOURCE 매크로 사용
			- HANDLE LoadImage( HINSTANCE hinst, LPCTSTR lpszName, UINT uType, int cxDesired, int cyDesired, UINT fuLoad)
			- 메모리 DC: 화면과 동일한 특성을 가진 메모리 일부 / 함수: HDC CreateCompatibleDC(HDC hdc)
			- 비트맵 출력: BOOL BitBlt( HDC hdcDest, int nXDest, int nYDest, int nWidth, int nHeight, HDC hdcSrc, int nXSrc, int nYSrc, DWORD dwRop)
			- 비트맵의 nWidth, nHeight는 GetObject() 함수를 통해 얻을 수 있음
			- 비트맵 확대축소 출력함수: StretchBlt(), TransparentBlt() <- 특정색 제외하고 출력까지 가능 (msimg32.lib 추가해야 함)

	6강. 키보드, 마우스, 타이머
		1) 키보드
			- 발생 메시지: WM_CHAR / 대소문자 구분 방법: wParam (아스키 코드 값)
			- 모든 키에 대해 발생하는 메시지: WM_KEYDOWN / 구분 방법: wParam / 가상 키 코드: VK_LEFT, VK_HOME, '1', 'A' 등
			- GetAsyncKeyState(): 실시간으로 키 입력을 체크, 메시지 큐에 저장되는 키 메시지의 단점 보완, 키 눌림이 잇으면 음수값 리턴
		2) 마우스
			- 마우스 메시지: 마우스 이동시 발생(WM_MOUSEMOVE) / 위치정보는 lParam에 저장됨 (LOWORD <- x, HIWORD <- y)
			- 그 외 메시지: WM_LBUTTONDOWN, WM_LBUTTONUP 등
			- wParam으로 전달되는 코드: MK_LBUTTON, MK_RBUTTON, MK_MBUTTON, MK_SHIFT 등 (클릭된 상태)
			- 드래그: WM_MOUSEMOVE + MK_LBUTTON
		3) 타이머
			- 일정한 시간 간격으로 함수 호출 또는 WM_TIMER 메시지 발생 / 일정한 시간 간격으로 코드 실행하기 위함
			- 생성: UINT_PTR SetTimer( HWND hWnd, UINT_PTR nIDEvent, UINT uElapse, TIMERPROC lpTimerFunc) <- lpTimerFunc를 주면 WM_TIMER발생 안함
			- 해제: BOOL KillTimer( HWND hWnd, UINT_PTR uIDEvent)
			- 메시지 처리: WM_TIMER + wParam(아이디)
			- 콜백 함수 처리: VOID CALLBACK TimerProc( HWND hWnd, UINT uMsg, UINT_PTR idEvent, DWORD dwTime)

	7강. 다이얼로그
		1) 모달형 다이얼로그
			- 다이얼로그가 최우선 순위 (모든 제어권을 가져감) / 대표적인 다이얼로그: MessageBox()
			- 생성 함수: INT_PTR DialogBox( HINSTANCE hInstance, LPCTSTR lpTemplate, HWND hWndParent, DLGPROC lpDialogFunc)
			- lpTemplate에는 "폼"을 만들어 MAKEINTRESOURCE로 지정
			- 콜백 함수 형식: INT_PTR CALLBACK DialogProc( HWND hwndDlg, UINT uMsg, WPARAM wParam, LPARAM, lParam)
				-> 메시지 처리시 TRUE, 처리 못할 시 FALSE
			- 다이얼로그 해제: BOOL WINAPI EndDialog( HWND hDlg, INT_PTR nResult) <- nResult는 부모 윈도우에게 전달되는 값
		2) 모델리스형 다이얼로그
			- 최우선 순위를 가지지 않음 / 폼은 모달형과 동일하게 만들면 됨 (그 대신 폼 속성 중 Visible을 True설정)
			- 생성 함수: HWND CreateDialog( HINSTANCE, LPCTSTR, HWND, DLGPROC)
			- 해제 함수: BOOL DestroyWindow( HWND)
		3) 다이얼로그 메시지
			- WM_INITDIALOG: 다이얼로그 생성시 발생 -> 초기화 용도
		4) 폼 기반의 윈도우 프로그래밍
			- WinMain()에서 DialogBox() 호출 / DialogBox( 인스턴스, 다이얼로그 아이디, 0, 콜백함수)
			- 타이틀 변경: 1. 리소스 속성의 Caption / 2. SetWindowText()
		5) 파일열기 모달형 다이얼로그
			- #include <commdlg.h> 추가
			- 파일열기 다이얼로그 생성 함수: BOOL GetOpenFileName( LPOPENFILENAME)
			- OPENFILENAME 구조체의 멤버변수: lStructSize, hwndOwner, lpstrFilter, nFilterIndex, lpstrFileTitle, lpstrFile, lpstrTitle 등
		6) 파일저장 모달형 다이얼로그
			- #include <commdlg.h> 추가
			- 파일저장 다이얼로그 생성 함수: BOOL GetSaveFileName( LPOPENFILENAME)
			- lpstrFilter 역할: 저장할 파일의 형식을 구분 / 확장자의 유무를 파악하여 확장자 추가 결정
		7) 이미지 뷰어 프로그램 만들기
			- 잘 만들어보자. 

	8강. 컨트롤(1)
		1) 컨트롤 기초
			- 생성 방법: CreateWindow() / 폼 + 도구상자
			- 개념: 중복되지 않는 양의 정수값 / 할당: VS에서 자동으로 할당 + IDC_xxxx로 시작
			- 컨트롤의 윈도우 핸들: HWND GetDlgItem( HWND, int)
			- 컨트롤 메시지 처리: WM_COMMAND로 전달 -> LOWORD(wParam)에 아이디, HIWORD(wParam)에 컨트롤 상태/통지 코드
			- 통지 코드: BN_CLICKED, BN_DBCLICK, BN_SETFOCUS, BN_HILITE 등
			- 기본 속성: Caption, ID, Visible
		2) Static Text
			- 역할: 문자열 출력 (따로 코드가 필요없음 / 추가만 하면 됨)
		3) 푸시 버튼
			- 생성 및 메시지 처리는 위의 컨트롤 기초와 동일
		4) 라디오 버튼
			- 역할: 여러 항목 중에서 하나 선택
			- 생성 및 메시지 처리는 위의 컨트롤 기초와 동일
			- 라디오 버튼 상태 조사 함수: UINT IsDlgButtonChecked( HWND, int) -> BST_CHECKED, BST_UNCHECKED return
			- 그룹 나누기: Group 속성 -> True로 설정
			- 상태 변경 (선택 vs 비선택) 함수: 1. BOOL CheckDlgButton() / 2. BOOL CheckRadioButton()
				-> CheckDlgButton( HWND, int, UINT): 개별 선택 및 비선택
				-> CheckRadioButton( HWND, int, int, int): 그룹 안에 있는 라디오 버튼 하나만 선택
		5) 체크 버튼
			- 역할: 다수의 컨트롤 선택, 다수의 선택 사항 파악
			- 생성 및 메시지 처리는 위의 컨트롤 기초와 동일
			- 상태 조사 함수(IsDlgButtonChecked)와 상태 변경 함수(CheckDlgButton)는 라디오 버튼과 동일

	9강. 컨트롤(2)
		1) 에디트 컨트롤
			- 사용자로부터 데이터 입력 / 데이터 입력, 수정, 삭제(데이터 편집)를 위한 컨트롤 / 다양한 속성 제공
			- ID, Password, Visible, Read only, Border, Number 등의 속성이 존재
			- 내용 읽기 함수: UINT GetDlgItemText( HWND, int, LPCTSTR, int), UINT GetDlgItemInt( HWND, int, BOOL, BOOL)
			- 데이터 설정 함수: BOOL SetDlgItemText( HWND, int, LPCTSTR), BOOL SetDlgItemInt( HWND, int, UINT, BOOL)
		2) 콤보 박스
			- 여러 항목을 리스트 형태로 출력 및 선택 / Simple, Drop Down, Drop List 형태 제공 / 항목이 펼쳐지는 영역 설정
			- 매크로 함수(Windowsx.h 포함): ComboBox_AddString(), ComboBox_DeleteString(), ComboBox_InsertString(), ComboBox_GetCurSel() 등
			- GetDlgItem() 사용
			- ComboBox_AddString( HWND, LPCTSTR) -> 메뉴 입력
			- ComboBox_DeleteString( HWND, int) -> 항목 삭제
			- ComboBox_InsertString( HWND, int, LPCTSTR) -> 항목 삽입
			- ComboBox_GetCurSel( HWND) -> 인덱스 조사 / 선택이 안됐을 땐 CB_ERR(-1)을 리턴
		3) 리스트 박스
			- 리스트 출력 영역 안에서 항목 선택
			- 매크로함수(windowsx.h 포함): ListBox_AddString(), ListBox_GetCurSel()

	10강. 리스트 컨트롤
		1) 개요
			- 다양한 뷰 스타일 / 기능, 코드 up / 다양한 매크로 함수 제공
			- 리스트 컨트롤 구조: 컬럼(column), 아이템, 서브 아이템 -> 시작 인덱스는 0
			- 포함 헤더: Commctrl.h, Windowsx.h
		2) 컬럼 생성과 문자열 등록
			- 매크로 함수: int ListView_InsertColumn( HWND, int, const LPLVCOLUMN)
			- LVCOLUMN 구조체: UINT mask, int fmt, int cx, LPTSTR pszText, int cchTextMax, int iSubItem 등
				-> mask: 컬럼에 적용할 속성을 결정 (일반적인 형태: LVCF_FMT | LVCF_WIDTH | LVCF_TEXT | LVCF_SUBITEM)
				-> fmt: 컬럼과 서브 아이템의 데이터 정렬 형식 지정 (LVCFMT_LEFT, LVCFMT_RIGHT, LVCFMT_CENTER)
				-> cx: 가로 길이, pszText: 문자열 지정, iSubItem: 서브 아이템 인덱스
		3) 아이템 관련 매크로 함수
			- int ListView_GetItemCount( HWND) -> 아이템 개수 조사, 아이템 생성 및 추가 등
			- int ListView_InsertItem( HWND, const LPLVITEM pitem) 
			- LVITEM 구조체: UINT mask (LVIF_TEXT로 설정), int iItem, int iSubItem, LPTSTR pszText 등
			- VOID ListView_SetItemText( HWND, int, int, LPCTSTR) -> 서브 아이템에 데이터 저장